(********************************************************************
 * COPYRIGHT -- HP
 ********************************************************************
 * Library: zzSQL_Lib
 * File: SQL_D32.ab
 * Author: treamsbottom
 * Created: May 08, 2012
 ********************************************************************
 * Implementation of library zzSQL_Lib
 ********************************************************************) 

(* *SQL FB that return 20 UDINTS from Cat number *)
FUNCTION_BLOCK SQL_Read_Write
	
SQL_Data = TRUE
status = ERR_FUB_BUSY

IF NOT enable AND (SQL <> eConnect)  THEN
	SQL = eDisconnect	
ENDIF
CASE SQL OF

	ACTION eConnect:
		internal_error = FALSE
		SQLConnect.enable 			= enable ;AND NOT internal_error
		SQLConnect.pServerName 		= pServerName;ADR("10.0.10.1:1433")  	
		SQLConnect.pUserName		= pUserName;ADR("SUP")	
		SQLConnect.pPassword		= pPassword;ADR("1234")
		SQLConnect.pDatabaseName	= pDatabaseName;ADR("SUPDB1")	
		SQLConnect.databaseSystem 	= DB_SYSTEM_MS_SQL
		SQLConnect FUB dbConnect()
	
		sql_Ident = SQLConnect.connectionIdent
		sql_Status = SQLConnect.status 	
		sql_Error = SQLConnect.dbError
		IF sql_Status = ERR_OK THEN
			SQL = eExecute	
			;SQL = eIdle	
		ELSE IF sql_Status <> ERR_FUB_BUSY THEN
			status = sql_Status
			SQL = eError
		ENDIF		
	ENDACTION


	ACTION eExecute:					
		SQLExecute.enable 			= TRUE 
		SQLExecute.connectionIdent 	= sql_Ident	
		SQLExecute.pSqlStatement 	= pSQl_Cmd_String	
		SQLExecute FUB dbExecuteSql()
		IF SQLExecute.status = ERR_OK THEN
			SQL = eReadData
			;SQL = eIdle	
		ELSE IF SQLExecute.status <> ERR_FUB_BUSY THEN
			status = SQLExecute.status
			SQL = eError
			sql_Error = SQLExecute.dbError
			sql_Status = SQLExecute.status	
		ENDIF		
	ENDACTION		

	ACTION eReadData:
		SQLFetchNextRow.enable = TRUE	
		SQLFetchNextRow.connectionIdent = sql_Ident		
		SQLFetchNextRow FUB dbFetchNextRow()						
		IF SQLFetchNextRow.status = ERR_OK THEN
			n = 1	
			SQL = eColumnCount
			;SQL = eIdle	
		ELSE IF SQLFetchNextRow.status = dbERR_DATABASE THEN; No valid data
			status = SQLFetchNextRow.status
			SQL = eDisconnect		
			SQL_Data = FALSE
		ELSE IF	SQLFetchNextRow.status <> ERR_FUB_BUSY THEN		
			status = SQLFetchNextRow.status
			sql_Error 	=  SQLFetchNextRow.dbError
			sql_Status 	= SQLFetchNextRow.status	
			SQL = eError		
		ENDIF		
	ENDACTION	

	ACTION eColumnCount:	
		SQlColumnCount.enable 			= TRUE
		SQlColumnCount.connectionIdent 	= sql_Ident
		SQlColumnCount FUB dbGetColumnCount()	
		IF SQlColumnCount.status = ERR_OK THEN
			ColumnCount = SQlColumnCount.columnCount	
			;SQL = eIdle
			IF ColumnCount > 0 THEN	
				SQL = eGetData
				SQL_Data = TRUE
				n = 1
			ELSE
				SQL = eDisconnect		
				SQL_Data = FALSE
			ENDIF		
		ELSE IF SQlColumnCount.status <> ERR_FUB_BUSY THEN	
			status = SQlColumnCount.status
			SQL = eError	
		ENDIF
	ENDACTION

	ACTION eGetData:

		SQLGetData.enable 			= TRUE
		SQLGetData.connectionIdent	= sql_Ident	
		SQLGetData.columnIdx		= n ; Columns Start from 1, 0 will return an error 
		SQLGetData.dataType			= DB_SQL_CHAR ; Variable String		
		SQLGetData.pData			= ADR(Data[n])	
		SQLGetData.dataSize			= SIZEOF(Data[n])					
		SQLGetData	FUB dbGetData()
		IF SQLGetData.status = ERR_OK THEN	
	
			IF n = ColumnCount THEN	
				;Cope Data to Out variable
				memcpy(pData,ADR(Data),SIZEOF(Data))
				SQL = eDisconnect	
			ENDIF	
			n = n + 1	
		ELSE IF SQLGetData.status <> ERR_FUB_BUSY THEN		
			status = SQLGetData.status
			sql_Error 	=  SQLGetData.dbError
			sql_Status 	= SQLGetData.status	
			SQL = eError
		ENDIF		
	ENDACTION	


	ACTION eDisconnect:	
		SQLDisconnect.enable 			= TRUE	
		SQLDisconnect.connectionIdent 	= sql_Ident
		SQLDisconnect FUB dbDisconnect()
		sql_Status = SQLDisconnect.status
		IF SQLDisconnect.status = ERR_OK THEN
			;enable = FALSE
			IF internal_error THEN
				status = 20
			ELSE	
				status = ERR_OK
			ENDIF	
			;SQL = eConnect
		ELSE IF SQLDisconnect.status = dbERR_INVALID_HANDLE THEN ; Ident not valid	
			SQL = eConnect
		ENDIF		
	ENDACTION


	ACTION eError:	
		internal_error = TRUE
		SQLGetErrorMsg.enable = TRUE
		SQLGetErrorMsg.connectionIdent = sql_Ident	
		SQLGetErrorMsg.pErrorMessage = ADR(SQL_Error_Msg)	
		SQLGetErrorMsg.errorMessageSize = SIZEOF(SQL_Error_Msg)
		SQLGetErrorMsg FUB dbGetErrorMessage()	
		IF SQLGetErrorMsg.status = ERR_OK THEN
			IF sql_Ident = 0 THEN
				SQL = eConnect
				;enable = FALSE
			ELSE 
				SQL = eDisconnect
			ENDIF		
		ELSE IF (SQLGetErrorMsg.status <> ERR_FUB_BUSY) THEN 			
			IF sql_Ident = 0 THEN
				SQL = eConnect
			ELSE 
				SQL = eDisconnect
			ENDIF
		ENDIF				
	ENDACTION		

ENDCASE			



	
	
END_FUNCTION_BLOCK