;CAN Bus data exchange with CBW

;--------------------------------------------------------
;Version 1.00 02/11/2009 D.J. First Issue
;Version 2.00 22/04/2011 D.J. Weight Calculation now here
;--------------------------------------------------------

PROGRAM _INIT

CAN_enable = 1
EventWrite1 = 0									;Reset CAN data table WRITE event
EventRead1 = 0  								;Reset CAN data table READ event
EventWrite2 = 0									;Reset CAN data table WRITE event
EventRead2 = 0  								;Reset CAN data table READ event
;EventWrite3 = 0									;Reset CAN data table WRITE event
;EventRead3 = 0  							    ;Reset CAN data table READ event

CANopen_01.enable		= CAN_enable
CANopen_01.baud_rate	= 25					;Define baud rate - 250 kbit/s
CANopen_01.cob_anz		= 100      				;Define number of link objects
CANopen_01.error_adr	= ADR(error_var)		;Define address for error output
CANopen_01.device		= ADR("SL1.IF1.ST1.IF1.ST2.IF1")	;Define number of device
CANopen_01.info			= 0

CANopen_01 FUB CANopen()						;Initiate CANopen

IF CANopen_01.status=0 THEN						;Check error level

	DOInfo.enable = 1
	DOInfo.pName  = "can_cmd"

	DOInfo FUB DatObjInfo()

	IF (DOInfo.status = 0) THEN

		data_adr					= DOInfo.pDatObjMem
		CANdftab_01.enable			= 1
		CANdftab_01.us_ident 		= CANopen_01.us_ident	;Set us_id
		CANdftab_01.table_adr		= data_adr				;Define address of data object
		CANdftab_01.tab_num			= UINT(DOInfo.len / 72)	;Define number of values

		CANdftab_01 FUB CANdftab()    						;Initiate CANdftab

		IF CANdftab_01.status = 0 THEN
			WriteFrame1.ControlSignals = BIT_SET(WriteFrame1.ControlSignals,0);Set Live Signal
			;WriteFrame2.ControlSignals = BIT_SET(WriteFrame2.ControlSignals,0)
			;WriteFrame3.ControlSignals = BIT_SET(WriteFrame3.ControlSignals,0)
			CANOK = TRUE
		ENDIF

	ENDIF

ENDIF

END_PROGRAM

PROGRAM _CYCLIC

IF CANOK THEN

	;----------------
	;Set Write values
	;----------------

	;------------------------------------------------------
	;Configure the CAN write to CBW1 SDC1
	;------------------------------------------------------
Line[7].SpaceBIT
	IF (Line[7].SpaceBIT>0) AND CAN[1].BagReady THEN
		WriteFrame1.ControlSignals = BIT_SET(WriteFrame1.ControlSignals, 1)
	ELSE
		WriteFrame1.ControlSignals = BIT_CLR(WriteFrame1.ControlSignals, 1)
	ENDIF
	IF (Line[5].SpaceBIT>0) AND CAN[1].BagReady THEN
		WriteFrame1.ControlSignals = BIT_SET(WriteFrame1.ControlSignals, 2)
	ELSE
		WriteFrame1.ControlSignals = BIT_CLR(WriteFrame1.ControlSignals, 2)
	ENDIF
	EventWrite1 = TRUE

	;WriteFrame1.FaultNumber = 0
	WriteFrame1.Category = 0
	WriteFrame1.Customer    = 0
	WriteFrame1.Weight      = 0



	;------------------------
	;Service CAN table
	;------------------------

	IF CANdftab_01.status=0 THEN						(*check error level*)
		CANrwtab_01.enable		= 1
		CANrwtab_01.tab_ident	= CANdftab_01.tab_ident (*define tab_id*)
		CANrwtab_01 FUB CANrwtab()						(*initiate CANrwtab*)
		LastError = CANrwtab_01.status
	ENDIF


	;----------------------------------------------------
	;Check for incomming data from CBW1
	;----------------------------------------------------
	IF EventRead1 THEN
		EventRead1 = FALSE

		CAN[1].Live 			= BIT_TST(ReadFrame1.ControlSignals,0)
		CAN[1].UnloadFinished 	= BIT_TST(ReadFrame1.ControlSignals,1)
	;	CAN[1].FaultNumber		= ReadFrame1.FaultNumber
		CAN[1].Category			= ReadFrame1.Category
		CAN[1].Customer			= ReadFrame1.Customer
		CAN[1].Weight			= ReadFrame1.Weight

		IF CAN[1].Live THEN
			CAN[1].LiveTime = 50	;5 seconds
		ENDIF
	ENDIF

	IF NOT CAN[1].Live THEN
		ReadFrame1.ControlSignals = BIT_CLR(ReadFrame1.ControlSignals,0)
	ENDIF

	;-----------------
	;Live section
	;-----------------
	LOOP n = 1 TO 8 DO
		IF (CAN[n].LiveTime > 0) THEN
			CAN[n].LiveTime = (CAN[n].LiveTime - 1)
		ENDIF
		CAN[n].Live = (CAN[n].LiveTime <> 0)
	ENDLOOP
ENDIF

;Monitor Registers for TrackView
D[91] = UINT(ReadFrame1.ControlSignals)	;ID = 231
D[92] = UINT(WriteFrame1.ControlSignals);ID = 230


END_PROGRAM

