;--------------------------------------------
;Sequence 0 - XXX0  D[900 + mySeq]
;--------------------------------------------

PROGRAM _INIT
(* init program *)
END_PROGRAM

PROGRAM _CYCLIC

;Inputs
mySeq				= 4	;Sequence number
myIO				= 101
myZone				= 3	
	
I_BagAtSep[1]		= X[myIO].X01
I_BagAtSep[2]		= X[myIO].X02
	
I_BagInSep[1]	= X[myIO].X03
I_BagInSep[2]	= X[myIO].X04

I_BagReleased	= X[121].X01	
	

myBuffBag[1]		= Line[66].FirstBag	
myBuffBag[2]		= Line[65].FirstBag
BufferBag 			= Line[myRelLine].FirstBag
	
myRelLine			= 90	
MaxLines			= 15
MaxBatchSize 		= 3 ; Max number of bags to send from 1 line with out selecting another..	
	
O_SelectLine[1]		= FALSE
O_SelectLine[2]		= FALSE
O_SelectLine[3]		= FALSE	
	
O_OpenSep[1]		= FALSE	
O_OpenSep[2]		= FALSE
O_OpenSep[3]		= FALSE	
	

	
Alarm[mySeq].Name 	= 0
Alarm[mySeq].Bag	= 10000 + mySeq
Alarm[mySeq].Beacon	= TRUE
Alarm[mySeq].Extra	= 0
Alarm[mySeq].Time	= 3000

;Setup Sequence
STEP = D[900 + mySeq]
;Setup Pulse contact
PLS = (STEP <> LASTSTEP)
LASTSTEP = STEP

;Sequence
IF (STEP = 0) THEN
	;Disabled
ENDIF

LOOP n = 1 TO 2 DO	
	TON_Settled[n].IN = I_BagAtSep[n]	
	TON_Settled[n].PT = 200	
	TON_Settled[n] FUB TON_10ms()	
	myBag = myBuffBag[n]
	LineValid[n] = TON_Settled[n].Q AND (Bag[myBag].Cat > 0) AND NOT I_BagInSep[n]		
	
	TON_BagInSep[n].IN = I_BagInSep[n]	
	TON_BagInSep[n].PT = 200
	TON_BagInSep[n] FUB TON_10ms()
;	;Correct Destination if bags take up more space than data..... Cannot check in search as using 3 BIT's
;	IF LineValid[n] AND (Bag[myBag].Dst > 0) THEN	
;		IF Line[Bag[myBag].Dst].Full THEN	
;			INC DebugCount
;			Bag[myBag].Dst = 0	
;		ENDIF
;	ENDIF		
	;Alarms	
ENDLOOP		
;Step 1 Try to find batch with the same category 

TON_10ms((STEP =1),150,ScanUpdate,ScanUpdateET)	
IF (STEP = 1) AND ScanUpdate THEN ; Allow short time for trips to settle and first point to change before looking for next batch	
	IF (CurrentDest <= 0) OR (CurrentDest > 15) THEN
		CurrentDest = 1
	ENDIF
	IF (CurrentLine <= 0) OR (CurrentLine > 2) THEN
		CurrentLine = 1
	ENDIF		
	IF (PrevLine <= 0) OR (PrevLine > 2) THEN
		PrevLine = 1 
	ENDIF			
	IF (LineBatchCount[CurrentLine] >= MaxBatchSize) AND LineValid[CurrentLine] AND (DestSearchCount > 2) THEN
		LineBatchCount[CurrentLine] = 0
	ENDIF	
	myDestLine = Bag[myBuffBag[CurrentLine]].Dst
	
		
	IF (myDestLine > 0) AND (myDestLine <= MaxLines) AND Line[myDestLine].Clear AND (D[mySeq] > 0) and NOT Std.HaltSysZone[myZone] THEN
		IF (Bag[BufferBag].Cat = 0) OR ((myDestLine  = PrevDest) AND Line[myRelLine].Clear)  THEN
			CurrentDest = myDestLine
			;Search for line with matching cat starting at the currently selected line. Ensure we do not send more than a certain number of bags from 1 line.	
			myBag = myBuffBag[CurrentLine]
			myDestBag	= (Line[myDestLine].LastBag - Line[myDestLine].Space) 	
	
			IF LineValid[CurrentLine] AND (LineBatchCount[CurrentLine] < MaxBatchSize) AND NOT I_BagReleased THEN ; Check line is valid	
				IF (Bag[myBag].Cat = Bag[myDestBag].Cat) THEN ; Match Cats.
					D[900 + mySeq] = 2	
				ELSE IF (Bag[Line[myDestLine].FirstBag].Cat = 0) THEN ; Line is empty 
					D[900 + mySeq] = 2	
				ELSE IF (DestSearchCount > 2) THEN ; No matches send any bag
					D[900 + mySeq] = 2
				ELSE
					INC CurrentLine ; Search next line.		
					INC LineSearchCount
					IF LineSearchCount > 2 THEN ; Search all lines if nothing search next buffer.
						LineSearchCount = 0
						INC DestSearchCount
					ENDIF		
				ENDIF
			ELSE
				INC CurrentLine ; Search next line.		
				INC LineSearchCount
				IF LineSearchCount > 2 THEN ; Search all lines if nothing search next buffer.
					LineSearchCount = 0
					INC DestSearchCount	
				ENDIF			
			ENDIF		
		ELSE
			INC CurrentLine ; Search next line.		
			INC LineSearchCount
			IF LineSearchCount > 2 THEN ; Search all lines if nothing search next buffer.
				LineSearchCount = 0
				INC DestSearchCount	
			ENDIF		
		ENDIF		
;	ELSE IF  (Bag[myBuffBag[CurrentLine]].Cat > 0) THEN
;		Alarm[mySeq].Name = almDestinationNotValid
;		Alarm[mySeq].Time = 0	
;		Alarm[mySeq].Bag = myBuffBag[CurrentLine]
	ELSE IF NOT Std.HaltSysZone[myZone] THEN	
		IF ((myDestLine > 0) AND (myDestLine <= MaxLines) AND Line[myDestLine].Full AND (D[mySeq] > 0) AND (DestSearchCount > 0)) THEN	
			Bag[myBuffBag[CurrentLine]].Dst = 0	
			;INC DebugCount
		ENDIF
			
		INC CurrentLine ; Search next line.		
		INC LineSearchCount
		IF LineSearchCount > 2 THEN ; Search all lines if nothing search next buffer.
			LineSearchCount = 0
			INC DestSearchCount			
		ENDIF					
	ENDIF		
ELSE IF (STEP <> 1) THEN
	DestSearchCount = 0
	LineSearchCount	= 0		
ENDIF	

;Step 2 Select Points if required	
TON_10ms(ResetRequired,200,ResetPoints,ResetPointsET)
IF (STEP = 2) THEN		
	LOOP n = 1 TO MaxLines DO	
		O_SelectDest[n]		= FALSE	
	ENDLOOP	
	IF (CurrentDest > 0) AND (CurrentDest <= MaxLines )  THEN 
		ResetRequired = ((CurrentDest <> PrevDest) OR (CurrentLine <> PrevLine))	
		O_SelectDest[CurrentDest] = TRUE
		O_SelectLine[CurrentLine] = TRUE	
		IF NOT ResetRequired OR ResetPoints THEN	
			;Clear All other line batch Counts
			LOOP n = 1 TO 3 DO
				IF (n <> CurrentLine) THEN
					LineBatchCount[n] = 0
				ENDIF		
			ENDLOOP		
			D[900 + mySeq] = 3
		ENDIF		
	ELSE
		D[900 + mySeq]  = 1 ; Invalid line/Dest selection reset seq
	ENDIF	
ENDIF
	
;Step 3 Release trolley
 	
IF (STEP = 3) THEN	
	IF (CurrentDest > 0) AND (CurrentDest <= MaxLines )  THEN 
		myDestLine = myRelLine
		myBag = myBuffBag[CurrentLine]
		myDestBag = Line[myRelLine].LastBag
		IF TON_BagInSep[CurrentLine].Q THEN
			Released = TRUE
		ENDIF		
		ReleaseValid = (Bag[myBag].Cat > 0) AND Line[myDestLine].Clear
		O_SelectDest[CurrentDest] = TRUE
		O_SelectLine[CurrentLine] = TRUE	
		O_OpenSep[CurrentLine] = ReleaseValid AND NOT Released
		IF I_BagReleased THEN
			INC LineBatchCount[CurrentLine]
			PrevDest = CurrentDest
			PrevLine = CurrentLine	
			Bag[myDestBag] = Bag[myBag]	
			Bag[myBag] = Bag[0]
			D[900 + mySeq] = 1
		ENDIF		
		IF (Bag[myBag].Cat = 0)THEN
			Alarm[mySeq].Bag = myBag
			Alarm[mySeq].Name = almBagDataError	
		ENDIF	
	ELSE
		Alarm[mySeq].Time = 0
		Alarm[mySeq].Name = almGeneralSequence
	ENDIF			
ELSE
	Released = FALSE		
ENDIF		

;ClearBatch Counts	

IF ClearCounts THEN	
	LOOP n = 1 TO 3 DO
		LineBatchCount[n] = 0
	ENDLOOP	
	ClearCounts = FALSE
ENDIF	

;Transer Bag Data
	
LOOP n = 1 TO MaxLines DO	
	
	StorageLineLastBag = Line[n].LastBag
	IF Line[n].Trip AND (Bag[BufferBag].Cat > 0) AND (Bag[BufferBag].Dst = n) AND (Bag[StorageLineLastBag].Cat = 0) THEN	
		
		Bag[StorageLineLastBag] = 	Bag[BufferBag]
		Bag[StorageLineLastBag].Dst = 0
		Bag[BufferBag] = Bag[0]	
	ENDIF
	LineSelect[n] = O_SelectDest[n]
	LineReset[n] = NOT O_SelectDest[n] AND (STEP <> 0)
ENDLOOP				
;-----------------------------------
;PLC Outputs - adjust to suit system
;-----------------------------------

Y[myIO].Y05 = O_OpenSep[1]
Y[myIO].Y06 = O_OpenSep[2]

	
Y[myIO].Y07 = O_SelectLine[1]
Y[myIO].Y08 = O_SelectLine[2]
		
Y[51].Y05 = LineSelect[1]
Y[51].Y07 = LineReset[1]	
Y[51].Y06= LineSelect[2]
Y[51].Y08 = LineReset[2]	
Y[52].Y05 = LineSelect[3]
Y[52].Y07 = LineReset[3]	
Y[52].Y06= LineSelect[4]
Y[52].Y08 = LineReset[4]
Y[53].Y05 = LineSelect[5]
Y[53].Y07 = LineReset[5]	
Y[53].Y06= LineSelect[6]
Y[53].Y08 = LineReset[6]
Y[54].Y05 = LineSelect[7]
Y[54].Y07 = LineReset[7]	
Y[54].Y06= LineSelect[8]
Y[54].Y08 = LineReset[8]
Y[55].Y05 = LineSelect[9]
Y[55].Y07 = LineReset[9]	
Y[55].Y06= LineSelect[10]
Y[55].Y08 = LineReset[10]
Y[56].Y05 = LineSelect[11]
Y[56].Y07 = LineReset[11]	
Y[56].Y06= LineSelect[12]
Y[56].Y08 = LineReset[12]
	
	

;Alarms
TimerAlarm.IN 		= NOT PLS AND (Alarm[mySeq].Name > 0)
TimerAlarm.PT 		= Alarm[mySeq].Time
TimerAlarm FUB TON_10ms()
Alarm[mySeq].On 	= TimerAlarm.Q
Alarm[mySeq].ET 	= TimerAlarm.ET
Alarm[mySeq].Zone 	= myZone
END_PROGRAM

