PROGRAM _CYCLIC
	(* cyclic program *)

;-----------------------------------------------
;Alarm Messages with Screen position and history
;-----------------------------------------------

;------------------------------------------------
;Version 1.00 - 08/12/2005 First Issue D.J.
;Vesrion 2.00 - 17/10/2006 Added Alarm.Extra D.J.
;------------------------------------------------

;Note - Sequence must set the following
;Alarm[x].on
;Alarm[x].Bag - for the bag position where the alarm will appear
;Alarm[x].Name - for the message that will be displayed use constants strating "alm"
;Alarn[x].Extra - Extra data for Graphics to use ie. Line number with fault on offgoing storage

I_CancelAlarm 	= FALSE ;X[4].X16
I_EStop 		= Std.EStop
I_MotorOverload = Std.MotorOverload
I_InverterFault = FALSE ;(X[3].X03 OR X[3].X04 OR X[3].X05 OR X[3].X06)

;--------------
;Alarm Messages
;--------------

IF I_EStop THEN
	Alarm[100].On	= TRUE
	Alarm[100].Bag 	= 0
	Alarm[100].Name	= almEmergencyStop
ELSE IF I_MotorOverload THEN
	Alarm[100].On	= TRUE
	Alarm[100].Bag 	= 0
	Alarm[100].Name	= almMotorOverload
ELSE IF I_InverterFault THEN
	Alarm[100].On	= TRUE
	Alarm[100].Bag 	= 0
	Alarm[100].Name	= almInverterFault
ELSE
	Alarm[100].On	= FALSE
	Alarm[100].Bag 	= 0
	Alarm[100].Name	= almNoAlarm
ENDIF


;Shuffle the Alarms List

AlarmCount 		= 0
BeaconInList 	= FALSE

LOOP n = 1 TO 10 DO

	;If Alarm not on anymore the clear from the list
	AlmNumber = D[200 + n]
	IF NOT Alarm[AlmNumber].On THEN
		D[200 + n] = 0
		D[210 + n] = 0
	ENDIF

	;Shuffle the list down
	IF (D[200 + n] = 0) AND (D[201 + n] > 0) AND (n <> 10) THEN
		D[200 + n] = D[201 + n]
		D[210 + n] = D[211 + n]
		D[201 + n] = 0
		D[211 + n] = 0
	ENDIF

	;Set InList for any alarm in the list
	Alarm[D[200 + n]].InList = TRUE

	;Calculate total alarms in the list
	IF D[200 + n] > 0 THEN
		AlarmCount = AlarmCount + 1
	ENDIF

	;Is the alarm beacon required?
	IF Alarm[AlmNumber].On AND Alarm[AlmNumber].Beacon THEN
		BeaconInList = TRUE
	ENDIF

ENDLOOP

;Cancel the alarm beacon
IF I_CancelAlarm THEN
	CancelBeacon = TRUE
ENDIF

;Cancel the CancelAlarm beacon if no alarm in the list requires the beacon
IF NOT BeaconInList THEN
	CancelBeacon = FALSE
ENDIF

;Look at each sequence alarm and if not in list then add to list if space
LOOP n = 1 TO 109 DO

	;If alarm active and a code has been given and not in the list and history is clear then add
	IF ((AlarmCount < 10) AND Alarm[n].On AND NOT Alarm[n].InList AND ((D[221] = 0) OR (n > 100))) THEN

		;If name not set then set to general
		IF (Alarm[n].Name = 0) THEN
			Alarm[n].Name = almGeneralSequence
		ENDIF

		D[210] 			= n
		BuildD220		= LSL(Alarm[n].Extra,8)
		BuildD220 		= BuildD220 + Alarm[n].Name
		D[220] 			= BuildD220

		;New alarm found requiring the beacon
		IF Alarm[n].Beacon THEN
			CancelBeacon = FALSE
		ENDIF

		;Store to History - if not Unloading Alarm
		IF (n <= 100) THEN
			D[221] 			= n				;Alarm Number (Seq)
			D[222]			= Alarm[n].Name	;Alarm Name / Message
			D[223] 			= D[223] + 1	;Alarm ID
			D[224]			= Alarm[n].Extra;Alarm Extra Data
			IF D[223] > 32000 THEN
				D[223] = 1
			ENDIF
		ENDIF

		;Inc Total Alarms
		AlarmCount = AlarmCount + 1

	ENDIF

	;Cancel All InList's - will be checked on the next scan
	Alarm[n].InList = FALSE

ENDLOOP

;Show Alarm position on the screen
IF D[201] > 0 THEN
	D[0] = Alarm[D[201]].Bag
ELSE
	D[0] = 0
ENDIF

UnloadingAlarm = Alarm[101].On OR Alarm[102].On OR Alarm[103].On OR Alarm[104].On

;Alarm Output - Unloading Alarm cannot be cancelled
Y[5].Y16 = ((BeaconInList AND NOT CancelBeacon) OR UnloadingAlarm)
;Y[4].Y15 = CancelAlarm
END_PROGRAM

